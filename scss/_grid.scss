@mixin d($dispositivo) { 
	// será o mixin de d que quer dizer device que receberá um valor pela variável dispositivo que poderá ser t de tablet ou m de mobile
	@if $dispositivo == t {
		@media only screen and (min-width: 818px) and (max-width: 999px) {
			@content; // quando for chamado o mixin d com o valor t de tablet irá cair aqui nesse media query onde poderá ser definido o css que será usado, com isso não é necessário criar vários media
		}
	}
	@else if $dispositivo == m {
		@media only screen and (max-width: 818px) {
			@content; // mesma coisa para o de cima, porém para celulares
		}
	}
}

*, *:before, *:after {
  -webkit-box-sizing: border-box; /* serve para que as propriedas de não somar valores das boras e padding sejam entidas nos safari e google chrome mais antigos*/
  -moz-box-sizing: border-box; /* esse seria para o firefox mais antigo entender a propriedade*/ 
  box-sizing: border-box; /* não soma mais os valores da borda, padding com os valores de width e height. Válido a partir do CSS 3 */
}

$container: 960;
$gutter: 20; // margem
$colunas: 16;

%grid { // criando seletor que não existe que só será usado quando eu utilizar o extend
	float: left;
	margin-right: $gutter / 2 + px;
	margin-left: $gutter / 2 + px;
}

@for $i from 1 through $colunas {
	$width: $container / $colunas * $i - $gutter; // fazendo o cálculo para saber qual será o tamanho do grid
	.grid-#{$i} { // criando a classe do grid
		width: $width + px; // somando com px, pq não foi definido o tipo
		@extend %grid; // usando extend para que seja adicionado as margens e o float em todos os grids automaticamente
	}
}

.grid-1-3 { // container / 3 - gutter, para dividir em três colunas
	width: $container / 3 - $gutter + px;
	@extend %grid;
}

/* parte que vai o conteúdo */
.container {
	width: $container + px;
	margin: 0 auto; /* alinhado ao centro */
	padding: 0px;
	position: relative; /* posiciona o elemento em relação a ele */
}

/* pseudo classes para não deixar as caixas flutuando e conseguir colocar as caixas ao lado uma da outra*/
.container:after, .container:before {
	content: "";
	display: table;
}

/* permite colocar elementos um ao lado do outro */
.container:after {
	clear: both;
}

/* separação do tamanhos dos grids do photoshop 
Container = 960 px
Colunas = 16
Gutter = 20 margem



/* Iniciando design responsivo */

/* Dispositivos com tamanho de tela de tablets */
@include d(t) { // usando o mixin para o media query de tablet

	$container: 768;

	@for $i from 1 through $colunas {
		$width: $container / $colunas * $i - $gutter; // fazendo o cálculo para saber qual será o tamanho do grid
		.grid-#{$i} { // criando a classe do grid
			width: $width + px; // somando com px, pq não foi definido o tipo
			//@extend %grid; // não pode usar extend dentro de media query, o extend pode apenas de coisas que estão dentro do media
		}
	}

	.grid-1-3 { // container / 3 - gutter, para dividir em três colunas + px valor da medida
		width: ($container / 3) - $gutter + px;
	}

	.container {
		width: $container + px;
	}

}

/* Fim de Dispositivos com tamanho de tela de tablets */


/* Design para celulares */

@include d(m) { // usando o mixin de media query para celular

	$container: 300;

	%mobile {
		width: $container + px;
		float: none; /* nenhum elemento irá flutuar a esquerda */
		margin: 0 0 20px 0; /* margem de 20px para baixo, nos lugares que ficar ruim, será removido essa opção */
	}

	@for $i from 1 through $colunas {
		.grid-#{$i} { // criando a classe do grid
			@extend %mobile;
		}
	}

	.grid-1-3 {
		@extend %mobile;
	}

	.container {
		width: $container + px;
	}
}

/* Fim de Design para celulares */

/* Fim do design responsivo */